# State variables 
    - are permanently stored in contract storage. This means they're written to the Ethereum blockchain.
    - contract Example {
        // This will be stored permanently in the blockchain
        uint myUnsignedInteger = 100;
      }
    
# Strings
    - are used for arbitrary-length UTF-8 data.

# fixed arrays
    - uint[2] fixedArray;

# dynamic arrays
    - uint[] dynamicArray;

# private (visibility for functions)
    - only other functions within our contract will be able to call this function.
    - it's convention to start private function names with an underscore (_). 

# public (visibility for functions)
    - by default.
    - functions you want to expose to the world.

# (state modifier)
    - tells us how the function interacts with the BlockChain.

# view (state modifier)
    - it doesn't change any values or write anything || only viewing the data but not modifying it.
    - don't cost gas when they're called externally by a user.

# pure (state modifier)
    - doesn't read from the state of the app.
    - its return value depends only on its function parameters.

# keccak256
    - hash function, a version of SHA3.
    - maps an input into a random 256-bit hexidecimal number.
    - expects a single parameter of type bytes && have to "pack" any parameters before calling.

# event
    -  a way for your contract to communicate that something happened on the blockchain to your app front-end.
    - app front-end could then listen for the event.

# Web3.js 
    - javascript frontend that interacts with the contract.
    - (https://cryptozombies.io/en/lesson/1/chapter/14) for code


----------------------------------------------------------------------------------------------------------------
----------------------------            Chapter Two Notes             ------------------------------------------
----------------------------------------------------------------------------------------------------------------


# accounts
    - The Ethereum blockchain is made up of accounts, which you can think of like bank accounts.
    - An account has a balance of Ether

# address
    - Each account has an address; kinf of like a bank account number.
    - It's a unique identifier that points to that account.

# mappings
    - key-value store for storing and looking up data.
    - example : mapping(key => value) mappingName;

# msg.sender
    - global variable available to all functions.
    - refers to the address that called the current function.

# require
    - makes it so that the function will throw an error and stop executing if some condition is not true.

# inheritance
    - split your code logic across multiple contracts to organize the code.
    -  That means if you compile and deploy a contract that inherits, you will have access to both.

# ./
    - import contract in the same directory as this contract
    - example : import "./someothercontract.sol";

# Explict declartion of **memory** and/or **storage** keywords.
    - (https://cryptozombies.io/en/lesson/2/chapter/7)

# storage
    - variables stored permanently on the blockchain. 

# memory
    - variables are temporary, and are erased between external function calls to your contract.
    - variables declared inside functions, will disappear when the function call ends.

# state variables
    - variables declared outside of function.
    - by default storage and written permanently to the blockchain.

# internal (visibility for functions)
    - same as private, except that it's also accessible to contracts that inherit from this contract.

# external (visibility for functions)
    - similar to public, except that these functions can ONLY be called outside the contract.

# interface
    - for our contract to talk to another contract on the blockchain that we don't own.
    - (https://cryptozombies.io/en/lesson/2/chapter/10)

# Javascript implementation
    - (https://cryptozombies.io/en/lesson/2/chapter/14)


----------------------------------------------------------------------------------------------------------------
----------------------------           Chapter Three Notes            ------------------------------------------
----------------------------------------------------------------------------------------------------------------


# OpenZeppelin
    - a library of secure and community-vetted smart contracts that you can use in your own DApps.

# modifier (keyword)
    - can attach the modifier's name at the end of a function definition to change that function's behavior.

# gas
    - users have to spend ETH in order to execute functions on your DApp.

# struct packing
    - using a smaller-sized uint when possible in structs saves eth.
    - cluster identical data types together.

# now (keyword)
    - will return the current unix timestamp of the latest block.
    - returns a uint256 by default.

# seconds, minutes, hours, days, weeks, years (keywords)
    - will convert to a uint of the number of seconds in that length of time.
    - 1 minutes is 60, 1 hours is 3600, 1 days is 86400.


----------------------------------------------------------------------------------------------------------------
----------------------------           Chapter Four Notes             ------------------------------------------
----------------------------------------------------------------------------------------------------------------


# review
    - (https://cryptozombies.io/en/lesson/4/chapter/1)

# payable (modifier)
    - function that can receive Ether.

# msg.value
    - built-in unit.
    - way to see how much Ether was sent to the contract.
    
# transfer
    - 

# address(this).balance
    - return the total balance stored on the contract.

# keccak256
    - The best source of randomness in Solidity.


----------------------------------------------------------------------------------------------------------------
----------------------------           Chapter Five Notes             ------------------------------------------
----------------------------------------------------------------------------------------------------------------


# token
    - a smart contract that follows some common rules.
    - implements a standard set of functions that all other token contracts share.
    - contract that keeps track of who owns how much of that token, and 
      some functions so those users can transfer their tokens to other addresses.

# library
    - special type of contract in Solidity.
    - attach functions to native data types.

# comment style
    - (https://cryptozombies.io/en/lesson/5/chapter/13)


----------------------------------------------------------------------------------------------------------------
----------------------------            Chapter Six Notes             ------------------------------------------
----------------------------------------------------------------------------------------------------------------


# JSON-RPC
    - language Ethereum nodes speak

# to call a function on a smart contract, you need
    - The address of the smart contract
    - The function you want to call
    - The variables you want to pass to that function.

# Metamask
    - injects their web3 provider into the browser in the global JavaScript object web3 

# Web3.js will need 2 things to talk to your contract
    - its address
    - its ABI.

# ABI
    - Application Binary Interface. Basically it's a representation of your contracts' 
      methods in JSON format that tells Web3.js how to format function calls.

# call
    - used for view and pure functions.
    - won't create a transaction on the blockchain.

# send
    - create a transaction and change data on the blockchain. 
    - will require the user to pay gas.

























